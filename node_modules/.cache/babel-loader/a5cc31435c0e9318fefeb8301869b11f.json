{"ast":null,"code":"const isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl);\n      } else {\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log('New content is available; please refresh.');\n          } else {\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  fetch(swUrl).then(response => {\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/justinpricer/react-portfolio/src/registerServiceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","checkValidServiceWorker","registerValidSW","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","fetch","response","status","headers","get","indexOf","ready","unregister","reload"],"mappings":"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","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    \n    window.location.hostname === '[::1]' ||\n    \n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  \n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n   \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        \n        checkValidServiceWorker(swUrl);\n      } else {\n        \n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n             \n              console.log('New content is available; please refresh.');\n            } else {\n            \n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\n  fetch(swUrl)\n    .then(response => {\n     \n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        \n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        \n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}